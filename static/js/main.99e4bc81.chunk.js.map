{"version":3,"sources":["Form.js","App.js","serviceWorker.js","index.js"],"names":["myStatus","Form","props","state","name","message","handleSubmit","bind","handleChange","event","inputValue","target","value","stateField","this","setState","console","log","a","preventDefault","axios","post","key1","render","onSubmit","type","onChange","id","Component","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAGIA,EAAW,QAEMC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,GACNC,QAAS,IAEX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAPH,E,gDAUnB,SAAaE,GACX,IAAMC,EAAaD,EAAME,OAAOC,MAC1BC,EAAaJ,EAAME,OAAOP,KAChCU,KAAKC,SAAL,eACGF,EAAaH,IAEhBM,QAAQC,IAAIH,KAAKX,S,iEAEnB,WAAmBM,GAAnB,mBAAAS,EAAA,6DACET,EAAMU,iBADR,EAE4BL,KAAKX,MAAvBC,EAFV,EAEUA,KAAMC,EAFhB,EAEgBA,QAFhB,SAGQe,IAAMC,KACV,iEACA,CAAEC,KAAK,GAAD,OAAKlB,EAAL,aAAcC,KALxB,OAQCL,EAAW,iBACXc,KAAKS,SATN,gD,2EAcA,WACE,OACE,8BACE,uBAAMC,SAAUV,KAAKR,aAArB,UACE,0CACA,uBACEmB,KAAK,OACLrB,KAAK,OACLsB,SAAUZ,KAAKN,aACfI,MAAOE,KAAKX,MAAMC,OAGpB,6CACA,uBACEqB,KAAK,OACLrB,KAAK,UACLsB,SAAUZ,KAAKN,aACfI,MAAOE,KAAKX,MAAME,UAGpB,wBAAQoB,KAAK,SAAb,kBACL,mBAAGE,GAAG,SAAN,SAAgB3B,a,GAtDa4B,aCF5BC,E,4JACJ,WACE,OACE,gCACE,0DACA,cAAC,EAAD,W,GALUD,aAWHC,ICFKC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASZ,OAAO,cAAC,EAAD,IAASa,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.99e4bc81.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nvar myStatus = \"Ready\";\r\n\r\nexport default class Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      message: '',\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    const inputValue = event.target.value;\r\n    const stateField = event.target.name;\r\n    this.setState({\r\n      [stateField]: inputValue,\r\n    });\r\n    console.log(this.state);\r\n  }\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    const { name, message } = this.state;\r\n    await axios.post(\r\n      'https://yciq2g0499.execute-api.us-east-2.amazonaws.com/mytest/',\r\n      { key1: `${name}, ${message}` }\r\n    );\r\n//\t  alert(\"submit info\");\r\n\t  myStatus = \"Submitted info\";\r\n\t  this.render();\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            onChange={this.handleChange}\r\n            value={this.state.name}\r\n          />\r\n\r\n          <label>Message:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"message\"\r\n            onChange={this.handleChange}\r\n            value={this.state.message}\r\n          />\r\n\r\n          <button type=\"submit\">Send</button>\r\n\t    <p id=\"status\">{myStatus}</p>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Form from './Form.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Leave your message here:</h1>\n        <Form />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}