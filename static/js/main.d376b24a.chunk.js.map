{"version":3,"sources":["ApiComponent.js","AbsDisplay.js","CdmEnum.js","DcfDisplay.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["AbsDisplay","props","state","abs_result","makeApiCall","bind","apiInput","result_handler","axios","post","then","response","alert","JSON","stringify","resp","data","result","parse","body","error","Component","handleChange","event","preventDefault","inputValue","target","value","stateField","name","this","setState","myObj","abs_of","type","onChange","ApiComponent","CdmEnum","enum_options","initMenu","options","map","n","enum_name","optlist","getEnumOptions","ex","length","label","dcf","ref","change_handler","DcfDisplay","dcf_options","start_date","end_date","year_frac","stat","sd","ed","d","getDcfOptions","Form","message","timer","handleSubmit","console","log","a","key1","setTimeout","mycolor","onSubmit","id","style","color","class","bc","dow","period","rounding","weather_unit","fro","ias","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d376b24a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\n    const api = 'https://quzruch6uh.execute-api.us-east-2.amazonaws.com/default/';\r\n//    const api = 'https://herfu1jful.execute-api.us-east-2.amazonaws.com/test';\r\n\t//const api = 'https://uyx0srm8yk.execute-api.us-east-2.amazonaws.com/default';\r\nexport default class AbsDisplay extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\tabs_result: ''\r\n    };\r\n    //this.handleChange = this.handleChange.bind(this);\r\n    this.makeApiCall = this.makeApiCall.bind(this);\r\n  }\r\n\r\n\r\n\tmakeApiCall(apiInput, result_handler)\r\n\t{\r\n\t\taxios.post(api\r\n\t\t\t  ,  apiInput   \r\n\t\t  ).then((response) => { \r\n\t\t\t  alert(response + \"\");\r\n\t\t\t  alert(JSON.stringify(response, null, \"    \"));  \r\n\t\t\t  const resp = response.data;\r\n\t\t\t  alert(\"resp is \" + resp);\r\n\t\t\t  const result = JSON.parse(resp);\r\n\t\t\t  alert(\"parsed response\");\r\n\t\t\t  alert (result.body);\r\n\t\t\t  result_handler(result.body);\r\n\t\t\t  //myObj.setState({ abs_result : result.body });\r\n\t\t\t  return result.body;\r\n\t\t  }, (error) => { alert(error); } ); \r\n\t}\r\n\r\n\r\n\r\n  render() { return \"\"; }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport ApiComponent from './ApiComponent.js';\r\n\r\nexport default class AbsDisplay extends ApiComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\tabs_result: ''\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n\r\n  handleChange(event) {\r\n    event.preventDefault();\r\n    const inputValue = event.target.value;\r\n    const stateField = event.target.name;\r\n    this.setState({\r\n      [stateField]: inputValue,\r\n    });\r\n  var myObj = this;\r\n\tconst result = this.makeApiCall( { abs_of :  `${inputValue}` } , \r\n\t\tfunction(result) { \r\n\t\t//\talert(\"got a result of \"+ result); \r\n\t\t\tmyObj.setState({ abs_result : result });  }\r\n\t);\r\n  }\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n\t    <input type=\"number\" name=\"abs_of\" onChange={this.handleChange} value={this.state.abs_of} />\r\n\t    <p>Absolute response:  {this.state.abs_result } </p>\r\n\t</div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport ApiComponent from './ApiComponent.js';\r\n\r\n\r\nexport default class CdmEnum extends ApiComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    const enum_name= '';\r\n    const name = '';\r\n    const ref = '';\r\n    const label= '';\r\n    const change_handler= null;\r\n    this.state = {\r\n\tenum_options: ''\r\n\r\n    };\r\n    //this.handleChange = this.handleChange.bind(this);\r\n    this.initMenu = this.initMenu.bind(this);\r\n\tthis.initMenu();\r\n  }\r\n\r\n  handleChange(event) {\r\n    event.preventDefault();\r\n    //const inputValue = event.target.value;\r\n    //const stateField = event.target.name;\r\n\r\n    //this.setState({\r\n      //[stateField]: inputValue,\r\n\t    //year_frac:  'working ...'\r\n    //});\r\n    //var sd = (stateField == \"start_date\") ?   inputValue : this.state.start_date;\r\n    //var ed = (stateField == \"end_date\") ?  inputValue : this.state.end_date;\r\n    //var d = (stateField == \"dcf\") ? inputValue : this.state.dcf;\r\n  //var myObj = this;\r\n\t//const result = this.makeApiCall( { start_date : `${sd}`, end_date: `${ed}`, dcf: `${d}` } , \r\n\t\t//function(result) { \r\n\t\t\t//alert(\"got a DCF result of \"+ result); \r\n\t\t\t//myObj.setState({ year_frac : result });  }\r\n\t//);\r\n  }\r\n\r\n\r\ngetEnumOptions (options) \r\n{\r\n\treturn options.map(function (n) {\r\n\t\treturn <option key={n} value={n} > {n} </option>\r\n\t});\r\n}\r\n\r\ninitMenu() {\r\n  var myObj = this;\r\n\tthis.makeApiCall( { enum_options : myObj.props.enum_name } , \r\n\t\tfunction(result) { \r\n\t\t\t//alert(\"got a enum options of \"+ result); \r\n\t\t\tmyObj.setState({ enum_options : result });  }\r\n\t);\r\n}\r\n\r\n\r\n  render() {\r\n\tvar options;\r\n\t  var optlist;\r\n\t  try {\r\n\t     options = JSON.parse(this.state.enum_options);\r\n\t\toptlist = this.getEnumOptions(options);\t\r\n\t} catch (ex) {}\r\n\t  var optlen = options ?  options.length : -1;\r\n\t  var optlistlen = optlist ?  optlist.length : -1;\r\n    return (\r\n      <div>\r\n\t    <span>{this.props.label} &nbsp;</span>\r\n\t\t    <select  name={this.props.name} value={this.state.dcf} ref={this.props.ref} onChange={this.props.change_handler}>\r\n\t    { optlist }\r\n\t    \t\t</select>\r\n\t</div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport ApiComponent from './ApiComponent.js';\r\nimport CdmEnum from './CdmEnum.js';\r\n\r\n\r\nexport default class DcfDisplay extends ApiComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\tdcf_options: '',\r\n\tstart_date: '',\r\n\tend_date: '', \r\n\tdcf: '',\r\n\tyear_frac: '',\r\n\tstat: ''\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.initMenu = this.initMenu.bind(this);\r\n\tthis.initMenu();\r\n  }\r\n\r\n  handleChange(event) {\r\n    event.preventDefault();\r\n    const inputValue = event.target.value;\r\n    const stateField = event.target.name;\r\n\t  //alert(\"input value is \" + inputValue + \" and state field is \" + stateField);\r\n\r\n    this.setState({\r\n      [stateField]: inputValue,\r\n\t    year_frac:  'working ...'\r\n    });\r\n    var sd = (stateField == \"start_date\") ?   inputValue : this.state.start_date;\r\n    var ed = (stateField == \"end_date\") ?  inputValue : this.state.end_date;\r\n    var d = (stateField == \"dcf\") ? inputValue : this.state.dcf;\r\n  var myObj = this;\r\n\tconst result = this.makeApiCall( { start_date : `${sd}`, end_date: `${ed}`, dcf: `${d}` } , \r\n\t\tfunction(result) { \r\n\t\t\t//alert(\"got a DCF result of \"+ result); \r\n\t\t\tmyObj.setState({ year_frac : result });  }\r\n\t);\r\n  }\r\n\r\n\r\ngetDcfOptions (options) \r\n{\r\n\treturn options.map(function (n) {\r\n\t\treturn <option key={n} value={n} > {n} </option>\r\n\t});\r\n}\r\n\r\ninitMenu() {\r\n  var myObj = this;\r\n\tthis.makeApiCall( { dcf_options : 'true' } , \r\n\t\tfunction(result) { \r\n\t\t\t//alert(\"got a DCF options of \"+ result); \r\n\t\t\tmyObj.setState({ dcf_options : result });  }\r\n\t);\r\n}\r\n\r\n\r\n  render() {\r\n\tvar options;\r\n\t  var optlist;\r\n\t  try {\r\n\t     options = JSON.parse(this.state.dcf_options);\r\n\t\toptlist = this.getDcfOptions(options);\t\r\n\t} catch (ex) {}\r\n\t  var optlen = options ?  options.length : -1;\r\n\t  var optlistlen = optlist ?  optlist.length : -1;\r\n    return (\r\n      <div>\r\n\t    <table>\r\n\t    <tr>\r\n\t    <td>Start Date</td>\r\n\t    <td>\r\n\t    <input type=\"date\" name=\"start_date\" onChange={this.handleChange} value={this.state.start_date} />\r\n\t    </td>\r\n\t    <td>End Date</td>\r\n\t    <td>\r\n\t    <input type=\"date\" name=\"end_date\" onChange={this.handleChange} value={this.state.end_date} />\r\n\t    </td>\r\n\t    </tr>\r\n\t    </table>\r\n\t    <br/>\r\n\t    <CdmEnum enum_name=\"cdm.base.datetime.daycount.DayCountFractionEnum\" \r\n\t\t    label=\"Day Count Frac\" \r\n\t\t    name=\"dcf\" value={this.state.dcf} ref=\"selectDcf\"\r\n\t\t    ref=\"selectDCF\" \r\n\t    \t    change_handler={this.handleChange}\r\n\t\t    />\r\n\t    <br/>\r\n\t    <br/>\r\n\r\n\t    \r\n\r\n\r\n\t    <p>DCF response:  {this.state.year_frac } </p>\r\n\t</div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport AbsDisplay from './AbsDisplay.js';\r\nimport DcfDisplay from './DcfDisplay.js';\r\nimport CdmEnum from './CdmEnum.js';\r\n\r\n\r\nexport default class Form extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: '',\r\n      message: '',\r\n\tstat: 'Ready now',\r\n\t    timer: null,\r\n\tabs_of: '',\r\n\tabs_result: ''\r\n    };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    const inputValue = event.target.value;\r\n    const stateField = event.target.name;\r\n    this.setState({\r\n      [stateField]: inputValue,\r\n    });\r\n    console.log(this.state);\r\n  }\r\n\r\n\r\n  async handleSubmit(event) {\r\n    event.preventDefault();\r\n    const { name, message, stat, timer, abs_of, abs_result } = this.state;\r\n    this.setState({stat : \"Submitting\"});\r\n    await axios.post(\r\n      'https://yciq2g0499.execute-api.us-east-2.amazonaws.com/mytest/',\r\n      { key1: `${name}, ${message}` }\r\n    );\r\n//\t  alert(\"submit info\");\r\n\t  this.setState({stat : \"Submitted info!\", message : \"\"});\r\n\t  var myObj = this;\r\n\r\n\t  setTimeout( function() { myObj.setState({ stat : \"Ready\"}) }, 2000);\r\n  }\r\n\r\n\r\n\tdoJava() {\r\n\t\talert(\"hi there\");\r\n\t}\r\n\r\n\r\n  render() {\r\n    var mycolor = this.state.stat ===  \"Submitting\" ? \"red\" : \"green\";\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            onChange={this.handleChange}\r\n            value={this.state.name}\r\n          />\r\n\r\n          <label>Message:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"message\"\r\n            onChange={this.handleChange}\r\n            value={this.state.message}\r\n          />\r\n\r\n          <button type=\"submit\">Send</button>\r\n\t    <p id=\"status\" style={{color: mycolor }}>Status: {this.state.stat}</p>\r\n\t    </form>\r\n\r\n\t    <hr/>\r\n\t    <div class=\"border\">\r\n\t\t    <h3>Absolute Value </h3>\r\n\t\t    <AbsDisplay />\r\n\t    </div>\r\n\t    <br/>\r\n\t    <div class=\"border\">\r\n\t\t    <h3>Day Count Fraction</h3>\r\n\t\t    <DcfDisplay />\r\n\t    </div>\r\n\t    <div class=\"border\">\r\n\t    <CdmEnum enum_name=\"cdm.base.datetime.BusinessDayConventionEnum\" \r\n\t\t    label=\"Business Day Convention\" \r\n\t\t    name=\"bdc\" value={this.state.dcf} \r\n\t\t    ref=\"selectBDC\" \r\n\t    \t    change_handler={this.handleChange}\r\n\t\t    />\r\n\t    </div>\r\n\t    <div class=\"border\">\r\n\t    <CdmEnum enum_name=\"cdm.base.datetime.BusinessCenterEnum\" \r\n\t\t    label=\"Business Center\" \r\n\t\t    name=\"bc\" value={this.state.bc} \r\n\t\t    ref=\"selectBC\" \r\n\t    \t    change_handler={this.handleChange}\r\n\t\t    />\r\n\t    </div>\r\n\r\n\t    <div class=\"border\">\r\n\t    <CdmEnum enum_name=\"cdm.base.datetime.DayOfWeekEnum\" \r\n\t\t    label=\"Day of Week\" \r\n\t\t    name=\"dow\" value={this.state.dow} \r\n\t\t    ref=\"selectDOW\" \r\n\t    \t    change_handler={this.handleChange}\r\n\t\t    />\r\n\t    </div>\r\n\r\n\t    <div class=\"border\">\r\n\t    <CdmEnum enum_name=\"cdm.base.datetime.PeriodEnum\" \r\n\t\t    label=\"Period\" \r\n\t\t    name=\"period\" value={this.state.period} \r\n\t\t    ref=\"selectPeriod\" \r\n\t    \t    change_handler={this.handleChange}\r\n\t\t    />\r\n\t    </div>\r\n\r\n\t    <div class=\"border\">\r\n\t    <CdmEnum enum_name=\"cdm.base.math.RoundingDirectionEnum\" \r\n\t\t    label=\"Rounding Direction\" \r\n\t\t    name=\"rounding\" value={this.state.rounding} \r\n\t\t    ref=\"selectRounding\" \r\n\t    \t    change_handler={this.handleChange}\r\n\t\t    />\r\n\t    </div>\r\n\r\n\t    <div class=\"border\">\r\n\t    <CdmEnum enum_name=\"cdm.base.math.WeatherUnitEnum\" \r\n\t\t    label=\"Weather Unit\" \r\n\t\t    name=\"weather_unit\" value={this.state.weather_unit} \r\n\t\t    ref=\"selectWeatherUnit\" \r\n\t    \t    change_handler={this.handleChange}\r\n\t\t    />\r\n\t    </div>\r\n\r\n\t    <div class=\"border\">\r\n\t    <CdmEnum enum_name=\"cdm.base.staticdata.asset.rates.FloatingRateIndexEnum\" \r\n\t\t    label=\"Floating Rate Index\" \r\n\t\t    name=\"fro\" value={this.state.fro} \r\n\t\t    ref=\"selectFRO\" \r\n\t    \t    change_handler={this.handleChange}\r\n\t\t    />\r\n\t    </div>\r\n\r\n\t    <div class=\"border\">\r\n\t    <CdmEnum enum_name=\"cdm.product.asset.IndexAnnexSource\" \r\n\t\t    label=\"Index Annex Source\" \r\n\t\t    name=\"ias\" value={this.state.ias} \r\n\t\t    ref=\"selectIAS\" \r\n\t    \t    change_handler={this.handleChange}\r\n\t\t    />\r\n\t    </div>\r\n\r\n          <button onClick={()=> {\r\n\t\t  const myparams = \"{ key1: 'aaa', key2: 'bbb', key3: 'ccc' }\";\r\n\t\t  //alert(\"calling lambda\");\r\n\t\t  axios.post('https://quzruch6uh.execute-api.us-east-2.amazonaws.com/default/'\r\n\t\t\t  ,  { key1 : \"foo foo\"   } \r\n/*\r\n\t\t\t  ,\r\n        {\r\n            headers: { \r\n                'Content-Type' : 'text/plain'\r\n            }\r\n        }\r\n\t*/\r\n\t\t  ).then((response) => { \r\n\t\t\t  //alert(JSON.stringify(response, null, \"    \"));  \r\n\t\t\t  const resp = response.data;\r\n\t\t\t  //alert(\"resp is \" + resp);\r\n\t\t\t  const result = JSON.parse(resp);\r\n\t\t\t  //alert(\"parsed response\");\r\n\t\t\t  alert (result.body);\r\n\t\t  }, (error) => { alert(error); } ); \r\n\t\t  //alert(\"called lambda\");\r\n\t\t  //alert(\"response = \" + response);\r\n\t\t  }\r\n\t  }>Call Java Lambda!</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport Form from './Form.js';\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1>Leave your message here:</h1>\n        <Form />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}